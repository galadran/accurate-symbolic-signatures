/*
 * Running Time: 25s
 * Special Arguments or Flags: None
 * Symbolic Model: Equational, attack finding
 */
theory SCRYPT_UBD
begin
section{* Equational Theory *}
builtins: diffie-hellman, asymmetric-encryption
functions: h/1, KDF/1
functions: verify/3, sign/3, pk/1, true/0
equations: verify(sign(m,r, sk), m, pk(sk)) = true

functions: weakKey/1
equations: verify(sign(m1,r,x),m2,pk(weakKey(x))) = true

section{* Protocol Rules *}
rule Register_pk_normal:
  [ Fr(~ltk) ]
  --[OnlyTwice('REG_HON'), Honest($A), Register($A,pk(~ltk)) ]->
  [ !Ltk($A, ~ltk), !Pk($A, pk(~ltk)), Out(pk(~ltk)) ]
rule Register_pk_evil_validated:
  [ In(k) ]
  --[ Corrupt($E), Register($E,pk(k)) ]->
  [ !Pk($E, pk(k)) ]

rule Init_1:
  let outmsg = <$I, $R, pk(~ltkI),'g'^~ekI >
  in
  [ Fr(~ekI), !Ltk($I, ~ltkI) ]
  --[OnlyOnce('I1'),SessionBeginI(~ekI),SentI(~ekI,outmsg)]->
  [ Init_1($I, $R, ~ltkI, ~ekI ), Out(outmsg) ]

rule Resp_1:
  let ee_key = X^~ekR
      sigR = sign(<ee_key, 'g'^~ekR, X>,'0', ~ltkR)
      outmsg = < 'g'^~ekR, aenc(sigR,pkI) >
  in
    [ !Ltk($R, ~ltkR)
    , Fr(~ekR)
    , In( <$I, $R, pkI, X > ) ]
  --[OnlyOnce('R1'),SessionBeginR(~ekR)
    , RecvR(~ekR, <$I, $R, pkI, X > )
    , SentR(~ekR, outmsg)
    ]->
    [ Resp_1( $I, $R, ~ltkR, ~ekR, X,pkI)
    , Out(outmsg)
    ]
rule Init_2:
  let epkI = 'g'^~ekI
      ee_key = Y^~ekI
      sigR = adec(ct,~ltkI)
      sigI = sign(<ee_key, epkI, Y>,'0', ~ltkI)
      pms = ee_key
      outmsg = aenc(sigI,pkR)
  in
    [ Init_1( $I, $R, ~ltkI, ~ekI )
    , !Pk($R, pkR)
    , In(<Y, ct >)
    ]
  --[ AcceptedI(~ekI,$I,$R,epkI,Y, KDF(pms))
    , OnlyOnce('I2')
    , RecvI(~ekI, <Y, ct >)
    , SentI(~ekI, outmsg)
    , Eq(verify(sigR, <ee_key, Y, epkI>, pkR), true) ]->
    [ Out(outmsg),
      !SessionKey(~ekI,$I,$R, KDF(pms))
    ]
rule Resp_2:
  let epkR = 'g'^~ekR
      sigI = adec(ct,~ltkR)
      ee_key = X^~ekR
      pms = ee_key
  in
    [ !Pk($I, pkI)
    , Resp_1( $I, $R, ~ltkR, ~ekR, X,pkI)
    , In( ct)
    ]
  --[ AcceptedR(~ekR,$I,$R,X,epkR, KDF(pms))
    , OnlyOnce('R2')
    , RecvR(~ekR, ct)
    , Eq(verify(sigI, <ee_key, X, epkR>, pkI), true) ]->
    [ !SessionKey(~ekR,$I,$R, KDF(pms)) ]
section{* Axioms restricting the rules *}
restriction equalities_hold:
      "All x y #i. Eq(x, y) @ i ==> x = y"
restriction unique_registration:
  "All aid apk bid #i #j . Register(aid,apk) @ i & Register(bid,apk) @j ==> aid = bid"
section{* Lemmas defining security properties *}

/* These lemmas run for > 1 minute, the attacks can be found more quickly on the BOUNDED models.
lemma honest:
  exists-trace
  "
     Ex ephR Iid Rid pubephR key ephI pubephI #i #j .
     AcceptedR(ephR,Iid,Rid,pubephI,pubephR,key) @ i &
     AcceptedI(ephI,Iid,Rid,pubephI,pubephR,key) @ j &
      not (Ex #r. Corrupt(Iid) @ r) &
      not (Ex #r. Corrupt(Rid) @ r)
  "

lemma no_uks:
      "All ekI1 I1 R1 epkI1 Y1 pms #i ekR2 I2 R2 X2 epkR2 #j .
           AcceptedI(ekI1,I1,R1,epkI1,Y1, KDF(pms)) @ i &
           AcceptedR(ekR2,I2,R2,X2,epkR2, KDF(pms)) @ j &
          not (Ex #r. Corrupt(I1) @ r) &
          not (Ex #r. Corrupt(R2) @ r)
           ==>
          I1 = I2 & R1 = R2
      "

lemma strong_agree:
      "All ekI1 I1 R1 epkI1 Y1 pms #i ekR2 I2 R2 X2 epkR2 #j .
           AcceptedI(ekI1,I1,R1,epkI1,Y1, KDF(pms)) @ i &
           AcceptedR(ekR2,I2,R2,X2,epkR2, KDF(pms)) @ j &
          not (Ex #r. Corrupt(I1) @ r) &
          not (Ex #r. Corrupt(R2) @ r)
          ==>
          (All m #p . RecvI(ekI1,m) @ p ==> Ex #l . SentR(ekR2,m) @ l)
          &
          (All m #p . SentI(ekI1,m) @ p ==> Ex #l . RecvR(ekR2,m) @ l)
          &
          (All m #p . RecvR(ekI1,m) @ p ==> Ex #l . SentI(ekR2,m) @ l)
          &
          (All m #p . SentR(ekI1,m) @ p ==> Ex #l . RecvI(ekR2,m) @ l)
          "
*/
lemma secrecy_I:
        "All ekI1 I1 R1 epkI1 Y1 pms #i .
          AcceptedI(ekI1,I1,R1,epkI1,Y1, KDF(pms)) @ i &
          not (Ex #r. Corrupt(R1) @ r)
          ==>
          not (Ex #j . K(KDF(pms)) @ j)"

lemma secrecy_R:
        "All ekI1 I1 R1 epkI1 Y1 pms #i .
          AcceptedR(ekI1,I1,R1,epkI1,Y1, KDF(pms)) @ i &
          not (Ex #r. Corrupt(I1) @ r)
          ==>
          not (Ex #j . K(KDF(pms)) @ j)"
end
